---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: kepler
  name: otelcol
  labels:
    otel: collect
data:
  otelconfig.yaml: |
    receivers:
      prometheus:
        config:
          scrape_configs:
          - job_name: 'kepler'
            scrape_interval: 2s
            static_configs:
            # otel collector running as sidecar with kepler exporter, 
            # so kepler endpoint is localhost with default port 9102
            - targets: ['localhost:9102'] # kepler exporter endpoint
            # Hostname label(exported_instance) is required to filter namespaces and pod based on name of the instance.
              labels: 
                 exported_instance: HOSTNAME # Replace with actual hostname of the machine
              
    processors:

      # memory_limiter:
      #   check_interval: 2s
      #   limit_percentage: 95
      #   spike_limit_percentage: 25

      batch:

    exporters:
       debug:
         verbosity: detailed

       otlp:
        # Host name of the external opentelemetry collector
        endpoint: EXTERNAL_OTEL_PROTOCOL://EXTERNAL_OTEL_HOSTNAME:EXTERNAL_OTEL_PORT
        tls:
         insecure: true

    service:
      telemetry:
        logs:
          level: info
      pipelines:
        metrics:
          receivers: [prometheus]
          processors: [batch]
          exporters: [debug, otlp]
